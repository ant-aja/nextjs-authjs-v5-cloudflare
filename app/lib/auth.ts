import NextAuth from "next-auth";
import GoogleProvider from 'next-auth/providers/google';
import GithubProvider from 'next-auth/providers/github';
import EmailProvider from "next-auth/providers/email";
import CredentialsProvider from "next-auth/providers/credentials";

export const { auth, handlers: { GET, POST}} = NextAuth({
  providers: [
    //Credentials Login with traditional Username/pass (Kém bảo mật)
   //Lưu ý cách giảm rủi ro quản lý token jwt
   CredentialsProvider({
    // The name to display on the sign in form (e.g. "Sign in with...")
    name: "Email và mật khẩu",
    // `credentials` is used to generate a form on the sign in page.
    // You can specify which fields should be submitted, by adding keys to the `credentials` object.
    // e.g. domain, username, password, 2FA token, etc.
    // You can pass any HTML attribute to the <input> tag through the object.
    credentials: {
      username: { label: "Username", type: "text", placeholder: "Tên đăng nhập hoặc Email" },
      password: { label: "Password", type: "password", placeholder: "Mật khẩu" }
    },
    async authorize(credentials, req) {
      // Add logic here to look up the user from the credentials supplied: DB
      const user = { id: "1", name: "Tim Kieu", email: "tim@example.com" }

      if (user) {
        // Any object returned will be saved in `user` property of the JWT
        return user
      } else {
        // If you return null then an error will be displayed advising the user to check their details.
        return null

        // You can also Reject this callback with an Error thus the user will be sent to the error page with the error message as a query parameter
      }
    }
  }),
    // EmailProvider({
    //   server: {
    //     host: process.env.EMAIL_SERVER_HOST,
    //     port: process.env.EMAIL_SERVER_PORT,
    //     auth: {
    //       user: process.env.EMAIL_SERVER_USER,
    //       pass: process.env.EMAIL_SERVER_PASSWORD
    //     }
    //   },
    //   from: process.env.EMAIL_FROM
    // }),
    GithubProvider({
      clientId: process.env.AUTH_GITHUB_ID as string,
      clientSecret: process.env.AUTH_GITHUB_SECRET as string
    }),
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID as string,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET as string
    })
  ],
 
  secret: process.env.AUTH_SECRET, //this is an AUTH secret. it can be generated by a terminal command.
})